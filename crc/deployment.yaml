kind: ConfigMap
apiVersion: v1
metadata:
  name: "mlflow-db-config"
data:
  PGPASSWORD: "mlflow_pwd"
  POSTGRES_USER: "mlflow_user"
  POSTGRES_PASSWORD: "mlflow_pwd"
  POSTGRES_DATABASE: "mlflow_db"
  PGDATA: "/var/lib/postgresql/mlflow/data"

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: "mlflow-config"
data:
  MLFLOW_S3_ENDPOINT_URL: "http://127.0.0.1:9000"
  AWS_ACCESS_KEY_ID: "**"
  AWS_SECRET_ACCESS_KEY: "**"
  MLFLOW_TRACKING_INSECURE_TLS: "true"
  MLFLOW_S3_IGNORE_TLS: "true"

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "mlflow-db"
  labels:
    app: "mlflow"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem

---

kind: Service
apiVersion: v1
metadata:
  name: "mlflow-db"
  labels:
    app: "mlflow"
spec:
  ports:
    - name: 5432-tcp
      protocol: TCP
      port: 5432
      targetPort: 5432
  selector:
    app: "mlflow"
    deployment: "mlflow-db"

---
apiVersion: v1
kind: Service
metadata:
  name: "mlflow-service"
spec:
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
      name: 5000-tcp
  selector:
    app: "mlflow"
    deployment: "mlflow-app"

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: "mlflow-db"
  labels:
    app: "mlflow"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "mlflow"
      deployment: "mlflow-db"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: "mlflow"
        deployment: "mlflow-db"
    spec:
      containers:
        - name: postgresql
          image: "postgres"
          envFrom:
            - configMapRef:
                name: mlflow-db-config
          livenessProbe:
            tcpSocket:
              port: 5432
          ports:
            - containerPort: 5432
              protocol: TCP
          resources:
            limits:
              memory: "512Mi"
          readinessProbe:
            exec:
              command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - psql -h 127.0.0.1  -U mlflow_user -tc "SELECT 1 FROM pg_database WHERE datname = 'mlflow_db'" | grep -q 1 || psql -U mlflow_user -c "CREATE DATABASE mlflow_db"
          volumeMounts:
            - mountPath: "/var/lib/postgresql/mlflow"
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "mlflow-db"

---

# Creating MLflow deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "mlflow"
      deployment: "mlflow-app"
  template:
    metadata:
      labels:
        app: "mlflow"
        deployment: "mlflow-app"
    spec:
      containers:
        - name: mlflow-deployment
          image: "default-route-openshift-image-registry.apps-crc.testing/mlflow/mlflow:0.0.2"
          imagePullPolicy: Always
          args:
          - --host=0.0.0.0
          - --port=5000
          - --backend-store-uri=postgresql://mlflow_user:mlflow_pwd@mlflow-db.mlflow.svc.cluster.local:5432/mlflow_db
          - --default-artifact-root=s3://mlflow/
          - --workers=2
          envFrom:
            - configMapRef:
                name: mlflow-config
          ports:
          - name: http
            containerPort: 5000
            protocol: TCP
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1"

---

apiVersion: v1
kind: Route
metadata:
  name: mlflow-route
  namespace: mlflow
spec:
  host: mlflow-test.apps-crc.testing
  to:
    kind: Service
    name: mlflow-service
  port:
    targetPort: 5000-tcp

---

kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: mlflow-ingress
  namespace: crc-tf-mlflow
spec:
  rules:
    - host: crc-tf-mlflow-test.apps-crc.testing
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mlflow-service
                port:
                  number: 5000
